-> Python and Javascript packages

-> Focused on composition and modularity

-Models
    -> LLMS 20+ integrations
    -> chat Models
    -> Text Embedding Models: 10+ integrations
-Prompts
    -> Prompt Templates
    -> Output parsers: 5+ implementations
    -> Example Selectors: 5+ implementations
-Indexes
    -> Document Loaders: 50+ implementations
    -> Text Splitters: 10+ implementations
    -> Vector Sotres: 10+ implementations
    -> Retriever: 5+ integrations

-Chains
    - Prompt+ LLM + Output parsing
    - Can be used as building blocks for longer Chains
    - More application specific chains: 20+ types

-Agents
    -> Agent Types: 5+ types
       - Algorithm for getting LLMs to use tools
    -> Agent ToolKits: 10+ implementations
       - Agents armed with specific tools for a specific application

- Models, Prompts and parsers
    -> Prompts can be long and detailed
    -> Wrapping them in LangChain Prompt makes it easier to reuse


-Memory
    -> LLM are stateless
    -> Each transaction is independent
    -> Chatbots appear to have memory by providing the full conversation as 'context'
    -> Different types of memory
        -> Conversation Buffer Memory
            - stores of memory and then etract the messages in a variable
        -> ConverstationBufferWindowMemory
            - list of interactions of the conv over time it only uses the last k interactions
        -> ConverstationBufferWindowMemory
            -> keeps a Buffer of recent interactions in memory and uses a token length rather than number of interactions
        -> ConversatoinSummaryMemory
            -> This memory creates a summary of the conv over time
        -> Vector data memory
            -> Stores text in a Vector db and retrieves the most relevant block of text
        -> Entity momories
            -> Using an LLM, it remembers details about specific entities.